# -*- coding: utf-8 -*-
"""
Created on Sun Feb  8 11:36:23 2015

@author: ryanterrill
"""

# Create a tuple that contains the names of the chain's states

States=("A","B")

# Define a transition probability matrix for the chain with states A and B

Matrix=[[0.4,0.6],[0.7,0.3]]

# Try accessing a individual element or an individual row 
# Element

Matrix[0][1]

# Row
Matrix[1]


# Import scipy U(0,1) random number generator

import scipy

# Paste or import your discrete sampling function

rand=scipy.random.random()

# Write your Markov chain simulator below. Record the states of your chain in 
# a list. Draw a random state to initiate the chain.



def markovChain(matrix,length):
    chain=[] #make an emtpy list
    seed=scipy.random.random(1) #generate a random number
    states=("A","B")
    if seed<matrix[0][0]: #this generates the first state of the chain
        state=states[0]
    else: 
        state=states[1]
    chain.append(state)
    if length ==1:
        return chain #this returns the chain once the recursive function finishes
    else:
        for state in markovChain(matrix,(length-1)): #recursive function addid a state to the chain for predefined length
            if state=="A": #check the previous state then reference the p value to changew or stay the same
                seed=scipy.random.random(1)
                if seed<=matrix[0][0]:
                    state=="A"
                else:
                    state=="B"
            elif state=="B":
                seed=scipy.random.random(1)
                if seed<=matrix[1][1]:
                    state=="B"
                else:
                    state=="A"
            chain.append(state)     
        return chain
   
                
        
    





# Run a simulation of 10 steps and print the output.

mc=markovChain(Matrix,10)

print mc



# Now try running 100 simulations of 100 steps each. How often does the chain
# end in each state? How does this change as you change the transition matrix?

def multiMC(chains,matrix,length):
    chainMatrix=[]
    if chains==1:
        chainMatrix=markovChain(matrix,length)
    else:    
        while chains>0:
            ch=markovChain(matrix,length)
            chainMatrix.append(ch)
            chains=chains-1
    return chainMatrix       
    

chainMatrix=multiMC(100,Matrix,100)


ch=chainMatrix[0][0]
ch.count("A")
def counter(matrix,state):
    out=0
    for i in range(100):
         for j in range(100):
            ch=matrix[i][j]
            statecount=ch.count(state)
            out=out+statecount
    return out
    
def printstates(chain,matrix):
    print " A = "+str(counter(chain,"A"))+"  B = "+str(counter(chain,"B"))+"  matrix = "+str(matrix) 

printstates(chainMatrix,Matrix)

Matrix1=[[0.1,0.9],[0.9,0.1]]

chainMatrix1=multiMC(100,Matrix1,100)
printstates(chainMatrix1,Matrix1)

Matrix2=[[1,0],[1,0]]

chainMatrix2=multiMC(100,Matrix2,100)
printstates(chainMatrix2,Matrix2)



# Try defining a state space for nucleotides: A, C, G, and T. Now define a 
# transition matrix with equal probabilities of change between states.

nucs=["A","C","G","T"]
nucMatrix=[[0.25,0.25,0.25,0.25],[0.25,0.25,0.25,0.25],[0.25,0.25,0.25,0.25],[0.25,0.25,0.25,0.25]]
 
# Again, run 100 simulations of 100 steps and look at the ending states. Then
# try changing the transition matrix.

 

        
     

def nucMarkovChain(matrix,length): #makes one markov chain with input length from a transition matrix
    def chooser(row,matrix,nucs): #chooses a nucleotide to start with based on the matrix#
        def nucLine(row,nucs): #make a row of nucleotide transitions that line up with the transition matrix
            nucLine=[]
            for i in range(4):
                row=row
                g=nucs[row]
                f=nucs[i]
                nucLine.append((g,f))
            return nucLine   
        def nucleotideMatrix(nucs): #iterate the lines into a matrix that corresponds with the p matrix of tuples, with the first nucleotide as the "in" nucleotide and the second as the "out" nucleotide
            nucMatrix=[]
            for i in range(4):
                nucMatrix.append(nucLine(i,nucs))
            return nucMatrix  
        nucleotideMatrix=nucleotideMatrix(nucs)        
        def changeLine(matrix):  #makes a line of additive p's from the p matrix ie each p is the sum of itself plus the previous ps
            changeMatrix=[] 
            for i in range(0,4):
                if i==0:
                    change=matrix[0][0]
                else:    
                    change+=matrix[0][i-1]
                changeMatrix.append(change)
            return changeMatrix   
        def changeMat(matrix): # makes a matrix of additive p's from the original p matrix
            nrow=4
            changeMatrix=[]
            if nrow==0:
                changeLine(matrix)
            else:
                while nrow>0:
                    x=changeLine(matrix)
                    changeMatrix.append(x)
                    nrow=nrow-1
            return changeMatrix  
        changeMatrix=changeMat(matrix)    #make the matrix of additive p's
        nucleotide="" #make an empty string for nucleotide
        row=row
        seed=scipy.random.random(1)
        if seed<=changeMatrix[row][0]: #for the previous state of the chain, references the row of the additive p matrix that corresponds with the previous nucleotide then tests a new random draw against the additive p's and returns the second nucleotide in the tuple accordingly
            nucleotide=nucleotideMatrix[row][0][1] 
        elif seed<=changeMatrix[row][1]:
            nucleotide=nucleotideMatrix[row][1][1]  
        elif seed<=changeMatrix[row][2]:
            nucleotide=nucleotideMatrix[row][2][1] 
        elif seed<=changeMatrix[row][3]:
            nucleotide=nucleotideMatrix[row][3][1]     
        return nucleotide 
    nucs=("A","C","G","T")     #make a list of nucleotides since they won't change no need for user input
    nucleotide=chooser(0,matrix,nucs) #seed the Markov chain with the first nucleotide  
    chain=[nucleotide] #make a new chain starting with the "seed" nucleotide
    seed=scipy.random.random(1) #make a new random draw each iteration
    row=0 #start at the first row, the lines below will move down the row depending on the previous state of the chain
    if length==1: #returns the chain at the end of the recursive function
        return chain
    else: #chose a row from the transition matrix based on where the chain was last
        for nucleotide in nucMarkovChain(matrix,(length-1)):       #recursive function adds a new nucleotide to the chain for the given length     
            if nucleotide=="A":
                row=0
            elif nucleotide=="C":
                row=1
            elif nucleotide=="G":
                row=2
            elif nucleotide=="T":
                row=3
            nucleotide=chooser(row,matrix,nucs) #then reference the matrix to decide where to go next
            chain.append(nucleotide)   
    return chain
        
        
hundredChain=nucMarkovChain(nucMatrix,100)       ### it wooorkks!!!### 

def multiNucMC(chains,matrix,length):
    nucChainMatrix=[]
    if chains==1:
        nucChainMatrix=nucMarkovChain(matrix,length)
    else:    
        while chains>0:
            ch=nucMarkovChain(matrix,length)
            nucChainMatrix.append(ch)
            chains=chains-1
    return nucChainMatrix  

hundredMatChain=multiNucMC(100,nucMatrix2,100)


    
def countAllNucs(chain):
    def countNuc(nucleotide,chain):
        out=chain.count(nucleotide)
        return out
    def sums(chain):
        out=[]
        nucs=["A","C","G","T"]
        add=[]
        addout=[]
        for i in range(4):
            for j in range(len(chain)):
             spot=countNuc(nucs[i],chain[j])
             out.append((spot,nucs[i]))
        return (out)
    sums=sums(chain)
    def nucLine(matrix):  #makes a line of additive p's from the matrix
        nucs=["A","C","G","T"]
        for j in nucs:
            final=[]
            out=[]
            change=[] 
            for i in range(0,100):
                if i==0:
                    change=matrix[i][0]
                else:    
                    change+=matrix[i-1][0]
                out.append((change,matrix[99][1]))
            final.append(out[99])
            for i in range(100,200):
                if i==100:
                    change1=matrix[i][0]
                else:    
                    change1+=matrix[i-1][0]
                out.append((change1,matrix[199][1]))
            final.append(out[199])
            for i in range(200,300):
                if i==200:
                    change2=matrix[i][0]
                else:    
                    change2+=matrix[i-1][0]
                out.append((change2,matrix[299][1]))
            final.append(out[299])
            for i in range(300,400):
                if i==300:
                    change3=matrix[i][0]
                else:    
                    change3+=matrix[i-1][0]
                out.append((change3,matrix[399][1]))
            final.append(out[399])
        return final
    finout=nucLine(sums)        
    return finout

        
        
hundredMatChain=multiNucMC(100,nucMatrix,100)
countAllNucs(hundredMatChain)   
 
nucMatrix1=[[0.1,0.2,0.3,0.4],[0.1,0.2,0.3,0.4],[0.1,0.2,0.23,0.4],[0.1,0.2,0.3,0.4]]

hundredMatChain1=multiNucMC(100,nucMatrix1,100)
countAllNucs(hundredMatChain1) 

nucMatrix2=[[0.7,0.1,0.1,0.1],[0.7,0.1,0.1,0.1],[0.7,0.1,0.1,0.1],[0.7,0.1,0.1,0.1]]
hundredMatChain2=multiNucMC(100,nucMatrix2,100)
countAllNucs(hundredMatChain2) 
