# -*- coding: utf-8 -*-
"""
Created on Sun Feb  8 11:36:23 2015

@author: ryanterrill
"""

# Create a tuple that contains the names of the chain's states

States=("A","B")

# Define a transition probability matrix for the chain with states A and B

Matrix=[[0.4,0.6],[0.7,0.3]]

# Try accessing a individual element or an individual row 
# Element

Matrix[0][1]

# Row
Matrix[1]


# Import scipy U(0,1) random number generator

import scipy

# Paste or import your discrete sampling function

rand=scipy.random.random()

# Write your Markov chain simulator below. Record the states of your chain in 
# a list. Draw a random state to initiate the chain.



def markovChain(matrix,length):
    chain=[]
    seed=scipy.random.random(1)
    states=("A","B")
    if seed>0.5:
        state=states[0]
    else: 
        state=states[1]
    chain.append(state)
    if length ==1:
        return chain
    else:
        for trans in markovChain(matrix,(length-1)):
            seed=scipy.random.random(1)
            if state=="A":
                if seed<Matrix[0][0]:
                    trans=="A"
                else:
                    trans=="B"
            elif state=="B":
                if seed<Matrix[1][1]:
                    trans=="B"
                else:
                    trans=="A"
            chain.append(trans)     
        return chain
   
                
        
    





# Run a simulation of 10 steps and print the output.

mc=markovChain(Matrix,10)

print mc



# Now try running 100 simulations of 100 steps each. How often does the chain
# end in each state? How does this change as you change the transition matrix?

def multiMC(chains,Matrix,length):
    chainmatrix=[]
    while chains>1:
        for ch in range(chains):
            ch=markovChain(Matrix,length)
            chainMatrix.append(ch)
            chains=chains-1
    return chainMatrix       
    

chainMatrix=multiMC(100,Matrix,100)


ch=chainMatrix[0][0]
ch.count("A")
def counter(matrix,state):
    out=0
    for i in range(100):
         for j in range(100):
            ch=chainMatrix[i][j]
            ch.count(state)
            out=out+state
    

# Try defining a state space for nucleotides: A, C, G, and T. Now define a 
# transition matrix with equal probabilities of change between states.



         
# Again, run 100 simulations of 100 steps and look at the ending states. Then
# try changing the transition matrix.
